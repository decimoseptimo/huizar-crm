<?php

namespace app\models;

use Yii;
use yii\base\Exception;
use yii\web\BadRequestHttpException;
use yii\web\HttpException;
use yii\db\Expression;
use app\models\Customer;
use yii\httpclient\Client;

/**
 * This is the model class for table "order".
 *
 * @property integer $id
 * @property integer $number
 * @property integer $status
 * @property integer $created_at
 * @property integer $updated_at
 * @property integer $finished_at
 * @property integer $customer_id
 * @property integer $user_notified_at
 *
 * @property Customer $user
 */
class Order extends \yii\db\ActiveRecord
{
    const STATUS_RECEIVED = 0;
    const STATUS_READY_TO_DELIVER = 1;
    const STATUS_DELIVERED = 2;

    //Desktop-POS statuses
    const DPOS_STATUS_RECEIVED = 'recibido';
    const DPOS_STATUS_READY_TO_DELIVER = 'finalizado';
    const DPOS_STATUS_DELIVERED = 'entregado';

    const DPOS_STATUS_MAP = [
        self::DPOS_STATUS_RECEIVED => self::STATUS_RECEIVED,
        self::DPOS_STATUS_READY_TO_DELIVER => self::STATUS_READY_TO_DELIVER,
        self::DPOS_STATUS_DELIVERED => self::STATUS_DELIVERED,
    ];

    const SCENARIO_SEARCH = 1;
    const SCENARIO_STATUS_UPDATE = 4;
    const SCENARIO_API_CREATE = 2;
    const SCENARIO_API_UPDATE = 3;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'order';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            ['id', 'required'],
            ['id', 'integer'],
            ['id', 'unique', 'except' => self::SCENARIO_SEARCH],

            //API rules
            ['customer_id', 'required', 'on' => self::SCENARIO_API_CREATE],
            ['customer_id', 'exist', 'targetClass' => Customer::className(), 'targetAttribute' => 'id', 'on' => self::SCENARIO_API_CREATE],
            ['customer_id', 'number', 'on' => [self::SCENARIO_API_CREATE]],

            ['status', 'required', 'on' => [self::SCENARIO_API_CREATE, self::SCENARIO_API_UPDATE]],
            ['status', 'parse_DPOS_Status', 'on' => [self::SCENARIO_API_CREATE, self::SCENARIO_API_UPDATE]],
            ['status', 'in', 'range' => self::allowedStatus()/*, 'strict' => true*/, 'except' => [self::SCENARIO_API_CREATE, self::SCENARIO_API_UPDATE]],
            ['status', 'statusProcessor', 'except' => self::SCENARIO_SEARCH],
        ];
    }

    /**
     * Alternative version for declaring scenarios.
     *
     * @return array
     */
    /*public function scenarios()
    {
        $scenarios = parent::scenarios();

        $scenarios[self::SCENARIO_API_CREATE] = ['customer_id', 'status'];
        $scenarios[self::SCENARIO_API_UPDATE] = ['staus'];

        return $scenarios;
    }*/

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'Numero',
            //'number' => 'Numero de Orden',
            'status' => 'Estado',
            'created_at' => 'Creado en',
            'updated_at' => 'Actualizado en',
            'finished_at' => 'Finalizado en',
            'customer_id' => 'ID Cliente',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCustomer()
    {
        return $this->hasOne(Customer::className(), ['id' => 'customer_id']);
    }

    public function beforeSave($insert)
    {
        if (parent::beforeSave($insert)) {
            if($this->isNewRecord) {
                $this->created_at = gmdate('Y-m-d H:i:s');
            }
            $this->updated_at = gmdate('Y-m-d H:i:s');

            //$this->isNewRecord ? $this->created_at = new Expression('UTC_TIMESTAMP()') : $this->updated_at = new Expression('UTC_TIMESTAMP()');
            //$this->isNewRecord ? $this->created_at = new Expression('NOW()') : $this->updated_at = new Expression('NOW()');

            return true;
        } else {
            return false;
        }
    }

    /*public function afterValidate()
    {
        parent::afterValidate(); // TODO: Change the autogenerated stub
    }*/

    /*
     * Checks status value before assigning it as attribute
     */
    public function statusProcessor($attribute, $params)
    {
        //if($value == $this->status)
        //    throw new BadRequestHttpException('La orden ya se encuentra en el estado solicitado.');

        //if (!in_array($value, self::allowedStatus()))
        //    throw new BadRequestHttpException('El estado solicitado no es valido.');

        //if order is ready and user hasn't been notified
        if ($this->status == self::STATUS_READY_TO_DELIVER && !$this->user_notified_at) {
            //notify user via email
            $response = self::sendMail(
                Yii::$app->params['api.emailFrom'],
                Yii::$app->params['api.emailToTest'],
                'Tu orden esta lista',
                $this->customer->fullName,
                $this->id
            );
            //if notification went ok
            if($response->isOk) {
                //set notification time
                $this->user_notified_at = gmdate('Y-m-d H:i:s');
            }
        //if order is finished and it hasn't been marked as such
        } elseif ($this->status == self::STATUS_DELIVERED && !$this->finished_at) {
            //set finish time
            $this->finished_at = gmdate('Y-m-d H:i:s');
        }
    }

    /*
     * Sends email through the ESP API (Mailgun API)
     *
     * @return http response
     */
    public static function sendMail($from, $to, $subject, $customerName, $orderNumber) {
        $httpClient = new Client();
        $httpClient->baseUrl = Yii::$app->params['api.domain'];

        $mailTemplate = self::getMailTemplate(
            $customerName,
            $orderNumber
        );

        $request = $httpClient->createRequest()
            ->setUrl('messages')
            ->setMethod('post')
            ->setHeaders(['authorization'=>'Basic ' . base64_encode('api:' . Yii::$app->params['api.key'])])
            ->setData([
                'from' => $from,
                'to' => $to,
                'subject' => $subject,
                //'text' => 'Version de texto plano',
                'html' => $mailTemplate,
                'h:List-Unsubscribe' => '%unsubscribe_url%',
            ]);

        return $request->send();
    }

    /*
     * Returns a mail template content
     */
    public static function getMailTemplate($customerName, $orderNumber) {
        ob_start();
        include Yii::getAlias('@app/views/emails/transactional-simple.php');
        return ob_get_clean();
    }

    /**
     * Returns a list of allowed statuses
     *
     * @return array
     */
    public function allowedStatus()
    {
        return [self::STATUS_RECEIVED, self::STATUS_READY_TO_DELIVER, self::STATUS_DELIVERED];
    }

    /**
     * Returns mapped status
     *
     * @param $attribute
     * @return null
    */
    public function parse_DPOS_Status($attribute, $params)
    {
        foreach(self::DPOS_STATUS_MAP as $key => $value){
            if ($this->$attribute == $key){
                $this->$attribute = $value;
                return;
            }
        }
        //throw new HttpException(422, 'Estado invalido: ' . $this->$attribute);
        $this->addError($attribute, 'Estado invalido: ' . $this->$attribute);
    }
}